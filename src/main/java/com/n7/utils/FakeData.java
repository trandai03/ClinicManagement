package com.n7.utils;

import com.github.javafaker.Faker;
import com.n7.constant.Gender;
import com.n7.constant.Status;
import com.n7.constant.UnitMedicine;
import com.n7.entity.*;
import com.n7.repository.*;
import jakarta.annotation.PostConstruct;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.*;
import java.util.concurrent.TimeUnit;

/**
 * FakeData Generator for DoAnTN Medical Clinic Management System
 * 
 * T·∫°o d·ªØ li·ªáu m·∫´u cho h·ªá th·ªëng qu·∫£n l√Ω ph√≤ng kh√°m y t·∫ø s·ª≠ d·ª•ng JavaFaker.
 * D·ªØ li·ªáu ƒë∆∞·ª£c t·∫°o bao g·ªìm:
 * - 200 booking records v·ªõi tr·∫°ng th√°i ƒëa d·∫°ng (SUCCESS 71%, c√°c tr·∫°ng th√°i kh√°c 29%)
 * - History records cho c√°c booking SUCCESS
 * - Prescription records (2-5 thu·ªëc m·ªói history)
 * - ServiceRequest records (1-3 d·ªãch v·ª• m·ªói booking)
 * - B√°c sƒ© (2-3 b√°c sƒ© m·ªói chuy√™n khoa)
 * - 20 lo·∫°i thu·ªëc c∆° b·∫£n
 * - 15 d·ªãch v·ª• y t·∫ø
 * - 12 b√†i vi·∫øt y t·∫ø
 * 
 * Configuration:
 * - B·∫≠t/t·∫Øt th√¥ng qua app.fake-data.enabled trong application.properties
 * - Ch·ªâ t·∫°o khi s·ªë l∆∞·ª£ng booking < 50
 * - D·ªØ li·ªáu ƒë∆∞·ª£c ph√¢n ph·ªëi ƒë·ªÅu trong 8 th√°ng qua (2024-2025)
 * 
 * @author DoAnTN Team
 * @version 1.0
 * @since 2025-01-01
 */
@Component
public class FakeData {
    
    @Value("${app.fake-data.enabled:false}")
    private boolean fakeDataEnabled;
    
    @Autowired
    private BookingRepo bookingRepo;
    
    @Autowired
    private HistoryRepo historyRepo;
    
    @Autowired
    private PrescriptionRepository prescriptionRepo;
    
    @Autowired
    private ServiceRequestRepository serviceRequestRepo;
    
    @Autowired
    private UserRepo userRepo;
    
    @Autowired
    private MajorRepo majorRepo;
    
    @Autowired
    private MedicineRepo medicineRepo;
    
    @Autowired
    private MedicalServiceRepo medicalServiceRepo;
    
    @Autowired
    private HourRepo hourRepo;
    
    @Autowired
    private DoctorRankRepository doctorRankRepo;
    
    @Autowired
    private RoleRepo roleRepo;
    
    @Autowired
    private DoctorScheduleRepository doctorScheduleRepo;
    
    @Autowired
    private ArticleRepo articleRepo;
    
    private final Faker faker = new Faker(new Locale("vi"));
    
    @PostConstruct
    public void fakeData() {
        // Ki·ªÉm tra xem c√≥ ƒë∆∞·ª£c ph√©p t·∫°o fake data kh√¥ng
        if (!fakeDataEnabled) {
            System.out.println("‚ö†Ô∏è Fake data b·ªã t·∫Øt. B·∫≠t b·∫±ng c√°ch set app.fake-data.enabled=true");
            return;
        }
        
        // Ch·ªâ t·∫°o fake data n·∫øu ch∆∞a c√≥ d·ªØ li·ªáu
        if (bookingRepo.count() < 200) {
            System.out.println("üöÄ B·∫Øt ƒë·∫ßu t·∫°o fake data...");
            
            // T·∫°o d·ªØ li·ªáu c∆° s·ªü tr∆∞·ªõc
            createDoctorsIfNeeded();
//            createBasicMedicines();
//            createBasicMedicalServices();
//            createArticlesIfNeeded();
            
            // T·∫°o d·ªØ li·ªáu ch√≠nh c√≥ li√™n k·∫øt
            createBookingsWithRelatedData();
            
            System.out.println("‚úÖ Ho√†n th√†nh t·∫°o fake data!");
        } else {
            System.out.println("‚ÑπÔ∏è ƒê√£ c√≥ ƒë·ªß d·ªØ li·ªáu booking, b·ªè qua t·∫°o fake data");
        }
    }
    
    private void createDoctorsIfNeeded() {
//        Role role = roleRepo.findById(2L).get();
        List<User> doctors = userRepo.findDoctor(null,null);
        List<Major> majors = majorRepo.findAll();
        
        if (doctors.size() < 15 && !majors.isEmpty()) {
            System.out.println("üë®‚Äç‚öïÔ∏è T·∫°o th√™m b√°c sƒ© cho c√°c chuy√™n khoa...");
            
            Role doctorRole = roleRepo.findById(2L).orElse(null);
            if (doctorRole == null) {
                System.out.println("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y role b√°c sƒ© (id=2)");
                return;
            }
            
            List<DoctorRank> doctorRanks = doctorRankRepo.findAll();
            if (doctorRanks.isEmpty()) {
                System.out.println("‚ö†Ô∏è Kh√¥ng c√≥ doctor rank trong database");
                return;
            }
            
            String[] doctorNames = {
                "BS. Nguy·ªÖn VƒÉn An", "BS. Tr·∫ßn Th·ªã B√¨nh", "BS. L√™ Ho√†ng C∆∞·ªùng", 
                "BS. Ph·∫°m Th·ªã Dung", "BS. Ho√†ng VƒÉn ƒê·ª©c", "BS. V≈© Th·ªã Lan",
                "BS. ƒê·∫∑ng Minh H·∫£i", "BS. Ng√¥ Th·ªã H∆∞∆°ng", "BS. B√πi VƒÉn Khoa",
                "BS. L√Ω Th·ªã Mai", "BS. Tr∆∞∆°ng VƒÉn Nam", "BS. ƒêinh Th·ªã Oanh",
                "BS. Phan VƒÉn Ph√∫c", "BS. T·∫° Th·ªã Qu·ª≥nh", "BS. L∆∞u VƒÉn S∆°n",
                "BS. Cao Th·ªã Th·∫£o", "BS. V√µ VƒÉn T√πng", "BS. ƒê·ªó Th·ªã Uy√™n",
                "BS. Hu·ª≥nh VƒÉn Vinh", "BS. Chu Th·ªã Xu√¢n"
            };
            
            // T·∫°o 2-3 b√°c sƒ© cho m·ªói chuy√™n khoa
            int doctorIndex = 0;
            for (Major major : majors) {
                int doctorsPerMajor = faker.number().numberBetween(2, 4);
                
                for (int i = 0; i < doctorsPerMajor && doctorIndex < doctorNames.length; i++) {
                    String doctorName = doctorNames[doctorIndex++];
                    
                    User doctor = new User();
                    doctor.setFullname(doctorName);
                    doctor.setUsername("doctor" + doctorIndex);
                    doctor.setPassword("$2a$10$encrypted_password"); // M·∫≠t kh·∫©u m√£ h√≥a
                    doctor.setPhone("0" + faker.number().numberBetween(100000000, 999999999));
                    doctor.setGmail(faker.internet().emailAddress());
                    doctor.setAvatar("https://via.placeholder.com/150");
                    doctor.setTrangthai("active");
                    doctor.setDescription(faker.lorem().sentence(10));
                    doctor.setRole(doctorRole);
                    doctor.setMajor(major);
                    doctor.setDoctorRank(doctorRanks.get(faker.number().numberBetween(0, doctorRanks.size())));
                    
                    userRepo.save(doctor);
                }
            }
            
            System.out.println("‚úÖ ƒê√£ t·∫°o th√™m " + (doctorIndex) + " b√°c sƒ©");
        }
    }
    
//    private void createArticlesIfNeeded() {
//        if (articleRepo.count() < 10) {
//            System.out.println("üì∞ T·∫°o b√†i vi·∫øt y t·∫ø...");
//
//            String[] articleTitles = {
//                "10 c√°ch ph√≤ng ng·ª´a b·ªánh tim m·∫°ch hi·ªáu qu·∫£",
//                "Ch·∫ø ƒë·ªô ƒÉn u·ªëng khoa h·ªçc cho ng∆∞·ªùi ti·ªÉu ƒë∆∞·ªùng",
//                "T·∫ßm quan tr·ªçng c·ªßa vi·ªác kh√°m s·ª©c kh·ªèe ƒë·ªãnh k·ª≥",
//                "C√°ch nh·∫≠n bi·∫øt c√°c d·∫•u hi·ªáu c·∫£nh b√°o ung th∆∞",
//                "B√≠ quy·∫øt gi·ªØ s·ª©c kh·ªèe tinh th·∫ßn t·ªët",
//                "H∆∞·ªõng d·∫´n chƒÉm s√≥c s·ª©c kh·ªèe ng∆∞·ªùi cao tu·ªïi",
//                "Vaccine - Khi√™n ch·∫Øn b·∫£o v·ªá s·ª©c kh·ªèe c·ªông ƒë·ªìng",
//                "T√°c h·∫°i c·ªßa thu·ªëc l√° ƒë·ªëi v·ªõi s·ª©c kh·ªèe",
//                "C√°ch x·ª≠ l√Ω c·∫•p c·ª©u khi b·ªã ƒë·ªôt qu·ªµ",
//                "Dinh d∆∞·ª°ng h·ª£p l√Ω cho tr·∫ª em ph√°t tri·ªÉn kh·ªèe m·∫°nh",
//                "Stress v√† c√°ch qu·∫£n l√Ω cƒÉng th·∫≥ng hi·ªáu qu·∫£",
//                "T·∫ßm quan tr·ªçng c·ªßa gi·∫•c ng·ªß ƒë·ªëi v·ªõi s·ª©c kh·ªèe"
//            };
//
//            for (String title : articleTitles) {
//                Article article = new Article();
//                article.setTitle(title);
//                article.setContent(faker.lorem().paragraph(20));
//                article.setImage("https://via.placeholder.com/600x400");
//                article.setCreateAt(faker.date().past(90, TimeUnit.DAYS));
//                article.setUpdateAt(new Date());
//                article.setViews(faker.number().numberBetween(100, 5000));
//                article.setStatus("PUBLISHED");
//
//                articleRepo.save(article);
//            }
//
//            System.out.println("‚úÖ ƒê√£ t·∫°o " + articleTitles.length + " b√†i vi·∫øt");
//        }
//    }
    
    private void createBasicMedicines() {
        if (medicineRepo.count() < 20) {
            System.out.println("üìã T·∫°o danh s√°ch thu·ªëc...");
            
            String[] medicineNames = {
                "Paracetamol", "Ibuprofen", "Amoxicillin", "Aspirin", "Metformin",
                "Omeprazole", "Atorvastatin", "Losartan", "Amlodipine", "Simvastatin",
                "Cephalexin", "Azithromycin", "Doxycycline", "Prednisone", "Furosemide",
                "Hydrochlorothiazide", "Lisinopril", "Gabapentin", "Tramadol", "Ciprofloxacin"
            };
            
            UnitMedicine[] units = UnitMedicine.values();
            
            for (String name : medicineNames) {
                Medicine medicine = Medicine.builder()
                    .name(name)
                    .quantity(faker.number().numberBetween(50L, 1000L))
                    .money(faker.number().numberBetween(5000L, 200000L))
                    .unit(units[faker.number().numberBetween(0, units.length)])
                    .description(faker.lorem().sentence(10))
                    .build();
                
                medicineRepo.save(medicine);
            }
            
            System.out.println("‚úÖ ƒê√£ t·∫°o " + medicineNames.length + " lo·∫°i thu·ªëc");
        }
    }
    
    private void createBasicMedicalServices() {
        if (medicalServiceRepo.count() < 15) {
            System.out.println("üè• T·∫°o danh s√°ch d·ªãch v·ª• y t·∫ø...");
            
            String[] serviceNames = {
                "X√©t nghi·ªám m√°u t·ªïng qu√°t", "Ch·ª•p X-quang ng·ª±c", "Si√™u √¢m b·ª•ng t·ªïng qu√°t",
                "ƒêi·ªán tim", "X√©t nghi·ªám n∆∞·ªõc ti·ªÉu", "Ch·ª•p CT Scanner", "N·ªôi soi d·∫° d√†y",
                "X√©t nghi·ªám sinh h√≥a", "Ch·ª•p MRI", "X√©t nghi·ªám vi sinh", "ƒêo m·∫≠t ƒë·ªô x∆∞∆°ng",
                "Holter ƒëi·ªán tim 24h", "X√©t nghi·ªám hormone", "Ch·ª•p mammography", "X√©t nghi·ªám ung th∆∞"
            };
            
            for (String name : serviceNames) {
                MedicalService service = MedicalService.builder()
                    .name(name)
                    .money(faker.number().numberBetween(100000L, 2000000L))
                    .description(faker.lorem().sentence(8))
                    .build();
                
                medicalServiceRepo.save(service);
            }
            
            System.out.println("‚úÖ ƒê√£ t·∫°o " + serviceNames.length + " d·ªãch v·ª• y t·∫ø");
        }
    }
    
    private void createBookingsWithRelatedData() {
        System.out.println("üìÖ T·∫°o booking v√† d·ªØ li·ªáu li√™n quan...");
        
        // L·∫•y d·ªØ li·ªáu c·∫ßn thi·∫øt
        List<User> doctors = userRepo.findDoctor(null,null); // Role b√°c sƒ©
        List<Major> majors = majorRepo.findAll();
        List<Hour> hours = hourRepo.findAll();
        List<Medicine> medicines = medicineRepo.findAll();
        List<MedicalService> medicalServices = medicalServiceRepo.findAll();
        
        if (doctors.isEmpty() || majors.isEmpty() || hours.isEmpty()) {
            System.out.println("‚ö†Ô∏è C·∫ßn c√≥ d·ªØ li·ªáu b√°c sƒ©, chuy√™n khoa v√† gi·ªù tr∆∞·ªõc khi t·∫°o booking!");
            return;
        }
        
        // T·∫°o 200 booking trong 6 th√°ng qua
        for (int i = 0; i < 200; i++) {
            // T·∫°o booking
            Booking booking = createRandomBooking(doctors, majors, hours);
            booking = bookingRepo.save(booking);
            
            // N·∫øu booking SUCCESS, t·∫°o history v√† c√°c d·ªØ li·ªáu li√™n quan
            if (booking.getStatus() == Status.SUCCESS) {
                History history = createHistoryForBooking(booking);
                history = historyRepo.save(history);
                
                // T·∫°o ƒë∆°n thu·ªëc (2-5 lo·∫°i thu·ªëc)
                createPrescriptionsForHistory(history, medicines);
                
                // T·∫°o y√™u c·∫ßu d·ªãch v·ª• (1-3 d·ªãch v·ª•)
                createServiceRequestsForBooking(booking, history, medicalServices);
            }
            
            if ((i + 1) % 50 == 0) {
                System.out.println("üìä ƒê√£ t·∫°o " + (i + 1) + " booking...");
            }
        }
        
        System.out.println("‚úÖ Ho√†n th√†nh t·∫°o booking v√† d·ªØ li·ªáu li√™n quan!");
    }
    
    private Booking createRandomBooking(List<User> doctors, List<Major> majors, List<Hour> hours) {
        User doctor = doctors.get(faker.number().numberBetween(0, doctors.size()));
        Major major = majors.get(faker.number().numberBetween(0, majors.size()));
        Hour hour = hours.get(faker.number().numberBetween(0, hours.size()));
        
        // T·∫°o ng√†y ph√¢n ph·ªëi ƒë·ªÅu trong 8 th√°ng qua ƒë·ªÉ c√≥ d·ªØ li·ªáu cho 2024-2025
        Date bookingDate = faker.date().past(240, TimeUnit.DAYS);
        
        // TƒÉng t·ª∑ l·ªá SUCCESS ƒë·ªÉ c√≥ nhi·ªÅu d·ªØ li·ªáu th·ªëng k√™ h∆°n
        Status[] statuses = {
            Status.SUCCESS, Status.SUCCESS, Status.SUCCESS, Status.SUCCESS, Status.SUCCESS, // 71% SUCCESS
            Status.CONFIRMING, Status.ACCEPTING, // 14% c√°c tr·∫°ng th√°i kh√°c
            Status.IN_PROGRESS, Status.CANCELLED
        };
        Status status = statuses[faker.number().numberBetween(0, statuses.length)];
        
        // ƒê·∫£m b·∫£o b√°c sƒ© thu·ªôc ƒë√∫ng chuy√™n khoa (n·∫øu c√≥)
        if (doctor.getMajor() != null) {
            major = doctor.getMajor();
        }
        
        return Booking.builder()
            .fullName(faker.name().fullName())
            .dob(faker.date().birthday(18, 80))
            .phone("0" + faker.number().numberBetween(100000000, 999999999))
            .email(faker.internet().emailAddress())
            .gender(faker.bool().bool() ? Gender.MALE : Gender.FEMALE)
            .address(faker.address().fullAddress())
            .date(bookingDate)
            .idHour(hour.getId())
            .status(status)
            .note(faker.lorem().sentence(5))
            .initialSymptoms(getRandomSymptom())
            .token(UUID.randomUUID().toString())
            .totalAmount(faker.number().numberBetween(200000L, 2000000L))
            .roomNumber("P" + faker.number().numberBetween(101, 350))
            .startTime(status == Status.SUCCESS ? 
                LocalDateTime.ofInstant(bookingDate.toInstant(), ZoneId.systemDefault()).plusHours(faker.number().numberBetween(8, 17)) : null)
            .endTime(status == Status.SUCCESS ? 
                LocalDateTime.ofInstant(bookingDate.toInstant(), ZoneId.systemDefault()).plusHours(faker.number().numberBetween(8, 17)).plusMinutes(30) : null)
            .paidAt(status == Status.SUCCESS ? 
                LocalDateTime.ofInstant(bookingDate.toInstant(), ZoneId.systemDefault()).plusHours(faker.number().numberBetween(8, 18)) : null)
            .paymentStatus(status == Status.SUCCESS ? "PAID" : "PENDING")
            .paymentMethod(status == Status.SUCCESS ? (faker.bool().bool() ? "CASH" : "CARD") : null)
            .user(doctor)
            .build();
    }
    
    private String getRandomSymptom() {
        String[] symptoms = {
            "ƒêau ƒë·∫ßu, ch√≥ng m·∫∑t", "Ho, s·ªët nh·∫π", "ƒêau b·ª•ng, kh√≥ ti√™u", 
            "M·ªát m·ªèi, u·ªÉ o·∫£i", "ƒêau ng·ª±c, kh√≥ th·ªü", "ƒêau l∆∞ng, c·ª©ng c·ªï",
            "M·∫•t ng·ªß, lo √¢u", "ƒêau kh·ªõp, s∆∞ng t·∫•y", "N√¥n m·ª≠a, ti√™u ch·∫£y",
            "ƒêau rƒÉng, s∆∞ng n∆∞·ªõu", "M·ªù m·∫Øt, nh·ª©c m·∫Øt", "ƒêau h·ªçng, kh√†n ti·∫øng",
            "T√™ tay ch√¢n", "Ph√°t ban, ng·ª©a", "Kh√≥ nu·ªët, ·ª£ h∆°i"
        };
        return symptoms[faker.number().numberBetween(0, symptoms.length)];
    }
    
    private History createHistoryForBooking(Booking booking) {
        return History.builder()
            .booking(booking)
            .medicalSummary(faker.lorem().paragraph(3))
            .diagnosis(faker.lorem().sentence(6))
            .treatment(faker.lorem().paragraph(2))
            .doctorNotes(faker.lorem().sentence(8))
            .examinationDate(booking.getStartTime())
            .startTime(booking.getStartTime())
            .endTime(booking.getEndTime())
            .consultationFee(faker.number().numberBetween(200000L, 500000L))
            .medicineFee(faker.number().numberBetween(100000L, 800000L))
            .serviceFee(faker.number().numberBetween(200000L, 1000000L))
            .totalAmount(booking.getTotalAmount())
            .build();
    }
    
    private void createPrescriptionsForHistory(History history, List<Medicine> medicines) {
        int prescriptionCount = faker.number().numberBetween(2, 6);
        Set<Long> usedMedicineIds = new HashSet<>();
        
        for (int i = 0; i < prescriptionCount; i++) {
            Medicine medicine;
            do {
                medicine = medicines.get(faker.number().numberBetween(0, medicines.size()));
            } while (usedMedicineIds.contains(medicine.getId()));
            
            usedMedicineIds.add(medicine.getId());
            
            int quantity = faker.number().numberBetween(1, 5);
            Long unitPrice = medicine.getMoney();
            
            Prescription prescription = Prescription.builder()
                .historyId(history.getId())
                .medicine(medicine)
                .quantity(quantity)
                .dosage(faker.number().numberBetween(1, 3) + " vi√™n/l·∫ßn, " + faker.number().numberBetween(1, 3) + " l·∫ßn/ng√†y")
                .instructions(faker.lorem().sentence(6))
                .unitPrice(unitPrice)
                .totalPrice(unitPrice * quantity)
                .build();
            
            prescriptionRepo.save(prescription);
        }
    }
    
    private void createServiceRequestsForBooking(Booking booking, History history, List<MedicalService> medicalServices) {
        int serviceCount = faker.number().numberBetween(1, 4);
        Set<Long> usedServiceIds = new HashSet<>();
        
        for (int i = 0; i < serviceCount; i++) {
            MedicalService service;
            do {
                service = medicalServices.get(faker.number().numberBetween(0, medicalServices.size()));
            } while (usedServiceIds.contains(service.getId()));
            
            usedServiceIds.add(service.getId());
            
            String[] serviceTypes = {"MEDICAL_SERVICE", "LAB_TEST"};
//            String[] statuses = {"REQUEST", "COMPLETED", "PENDING", "IN_PROGRESS"};
            
            ServiceRequest serviceRequest = ServiceRequest.builder()
                .booking(booking)
                .history(history)
                .medicalService(service)
                .serviceType(serviceTypes[faker.number().numberBetween(0, serviceTypes.length)])
                .status("COMPLETED")
                .requestNotes(faker.lorem().sentence(5))
                .resultNotes(faker.lorem().sentence(8))
                .cost(service.getMoney())
                .requestedAt(booking.getStartTime())
                .completedAt(faker.bool().bool() ? booking.getEndTime() : null)
                .labComment(faker.lorem().sentence(4))
                .build();
            
            serviceRequestRepo.save(serviceRequest);
        }
    }
}
